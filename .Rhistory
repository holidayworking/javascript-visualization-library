mode(test$price)
BMW.lm <- lm(price~gas, data=test)
summary(BMW/lm)
summary(BMW.lm)
View(test)
View(test)
BMW.lm <- lm(price~gas+year, data=test)
summary(BMW.lm)
BMW.lm <- lm(price~gas+year+color, data=test)
summary(BMW.lm)
View(BMW)
View(BMW)
summary(BMW.seibi)
summary(BMW$seibi)
BMW[BMW["price"] != "応談", ]
BMW[BMW["price"] != "応談", ]
BMW <- BMW[BMW["price"] != "応談", ]
BMW$price <- as.integer(BMW$price)
View(BMW)
View(BMW)
mode(BMW$year)
summary(BMW.lm)
plot(BMW)
library(ggplot2)
library(grid)
makeData <- function(n, sd = 0.3) {
x <- seq(0, 1, length = n)
t <- sin(2 * pi * x) + rnorm(n, mean = 0, sd = sd)
return(data.frame(x, t))
}
makeDataFrame <- function(x, t) {
data <- data.frame(x, t)
colnames(data) <- c("x", "t")
return(data)
}
estimate <- function(data, M) {
if (M == 0) {
return(lm(t ~ 1, data = data))
} else {
return(lm(t ~ poly(x, M), data = data))
}
}
fitting <- function(model, data) {
return(predict(model, newdata = data))
}
main <- function() {
learn <- makeData(10)
test <- makeData(100)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
model <- estimate(learn, 0)
result <- makeDataFrame(test$x, fitting(model, test))
M0 <- ggplot(learn, aes(x, t)) + geom_point(color = "blue") + stat_function(fun = function(x) sin(2 *
pi * x), color = "green") + geom_line(data = result, aes(x, t), colour = "red")
model <- estimate(learn, 1)
result <- makeDataFrame(test$x, fitting(model, test))
M1 <- ggplot(learn, aes(x, t)) + geom_point(color = "blue") + stat_function(fun = function(x) sin(2 *
pi * x), color = "green") + geom_line(data = result, aes(x, t), colour = "red")
model <- estimate(learn, 3)
result <- makeDataFrame(test$x, fitting(model, test))
M3 <- ggplot(learn, aes(x, t)) + geom_point(color = "blue") + stat_function(fun = function(x) sin(2 *
pi * x), color = "green") + geom_line(data = result, aes(x, t), colour = "red")
model <- estimate(learn, 9)
result <- makeDataFrame(test$x, fitting(model, test))
M9 <- ggplot(learn, aes(x, t)) + geom_point(color = "blue") + stat_function(fun = function(x) sin(2 *
pi * x), color = "green") + geom_line(data = result, aes(x, t), colour = "red") +
ylim(-1.25, 1.25)
print(M0, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(M1, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(M3, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(M9, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
}
set.seed(3)
main()
install.packages("rpart")
summary
`ゴルフ` <- read.csv("~/Downloads/\x04\x0B\x05.csv")
View(`ゴルフ`)
golf <- read.csv("~/Downloads/golf.csv")
View(golf)
install.packages("mvrpart")
library(mvrpart)
install.packages("mvpart")
library(mvpart)
golf.rp <- rpart(ゴルフ~., data=golf)
golf.rp
plot(golf.rp)
plot(golf.rp, uniform=T, branch=0.6, margin=0.05)
text(golf.rp, use.n=T, all=T)
install.packages("ggdendro")
libary(ggdendro)
library(ggdendro)
fitr <- dendro_data(golf.rp)
library(rpart)
golf.rp <- rpart(ゴルフ~., data=golf)
fitr <- dendro_data(golf.rp)
golf.rp
exit()
golf <- read.csv("~/Downloads/golf.csv")
View(golf)
library(rpart)
golf.rp <- rpart(ゴルフ~., data=golf)
golf.rp
library(mvpart)
golf.rp <- rpart(ゴルフ~., data=golf)
golf.rp
plot(golf.rp, uniform=T, branch=0.6, margin=0.05)
text(golf.rp, use.n=T, all=T)
plot(golf.rp, uniform=T, branch=0.5, margin=0.05)
text(golf.rp, use.n=T, all=T)
test <- read.csv("~/Downloads/test.csv")
View(test)
library(mvpart)
test.rp <- rpart(海水浴~., data=test)
plot(test)
plot(test.rp)
test <- read.csv("~/Downloads/test.csv")
View(test)
test.rp <- rpart(海水浴~., data=test)
plot(test.rp)
text(test.rp)
text(test.rp,use.n=T)
text(test.rp,all=T)
plot(test.rp)
text(test.rp,all=T)
golf <- read.csv("~/Downloads/golf.csv")
View(golf)
library(mvraprt)
library(mvpart)
golf.rp <- rpart(ゴルフ~.,data=golf)
plot(golf.rp, uniform=T, branch=0.6, margin=0.05)
text(golf.rp, use.n=T, all=T)
library(ggplot2)
library(ggdendro)
hc <- hclust(dist(USArrests), "ave")
hcdata <- dendro_data(hc, type="rectangle")
ggplot() +
geom_segment(data=segment(hcdata), aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=label(hcdata), aes(x=x, y=y, label=label, hjust=0), size=3) +
coord_flip() + scale_y_reverse(expand=c(0.2, 0))
install.packages("ggmap")
hdf <- get_map()
ggmap(hdf, extent = 'normal')
ggmap(hdf) # extent = 'panel', note qmap defaults to extent = 'device'
ggmap(hdf, extent = 'device')
library(ggmap)
hdf <- get_map()
ggmap(hdf, extent = 'normal')
install.packages("mapproj")
hdf <- get_map()
ggmap(hdf, extent = 'normal')
require(MASS)
mu <- c(-95.3632715, 29.7632836); nDataSets <- sample(4:10,1)
chkpts <- NULL
for(k in 1:nDataSets){
a <- rnorm(2); b <- rnorm(2); si <- 1/3000 * (outer(a,a) + outer(b,b))
chkpts <- rbind(chkpts, cbind(mvrnorm(rpois(1,50), jitter(mu, .01), si), k))
}
chkpts <- data.frame(chkpts)
names(chkpts) <- c('lon', 'lat','class')
chkpts$class <- factor(chkpts$class)
qplot(lon, lat, data = chkpts, colour = class)
ggmap(hdf, extent = 'normal') +
geom_point(aes(x = lon, y = lat, colour = class), data = chkpts, alpha = .5)
ggmap(get_map(maptype = 'satellite'), extent = 'device') +
stat_density2d(aes(x = lon, y = lat, colour = class), data = chkpts, bins = 5)
library(ggmap)
(map = ggmap(get_googlemap(center = c(137.5, 35.5), zoom = 5)) +
geom_point(data = read.csv("http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M2.5.txt"),
aes(Lon, Lat, size = Magnitude, colour = Depth)))
library(ggmap)
(map = ggmap(get_googlemap(center = c(137.5, 35.5), zoom = 5)) +
geom_point(data = read.csv("http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M2.5.txt"),
aes(Lon, Lat, size = Magnitude, colour = Depth)))
map = ggmap(get_googlemap(center = c(137.5, 35.5), zoom = 5)) +
geom_point(data = read.csv("http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M2.5.txt"),
aes(Lon, Lat, size = Magnitude, colour = Depth))
ggmap(get_googlemap(center = c(137.5, 35.5), zoom = 5)) +
geom_point(data = read.csv("http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M2.5.txt"),
aes(Lon, Lat, size = Magnitude, colour = Depth))
6591 / 11000
6591 / 11000 * 100
6591 / 42985 * 100
7993 / 42985
7993 / 42985 * 100
b<-c(11111, 1, 2, 3, 4, 5)
max(b)
summary(b)
0.1 * 1000
time <- 21:30:45
time <- "21:30:45"
strptime(time, "%H:%M:%S)
")"
""
strptime(time, "%H:%M:%S")
class(strptime(time, "%H:%M:%S"))
time <- "21:30:45"
as.POSIXct(time)
as.POSIXct(time, "%H:%M:%S")
as.POSIXct(time, tz="JST")
format.POSIXct(time, "%H:%M:%S")
class(type)
class(time)
format.POSIXlt(time, "%H:%M:%S")
strptime(time, "%H:%M:%S")
time <- "21:30:45"
class(time)
time <- strptime(time, "%H:%M:%S")
class(time)
time
as.POSIXct(time)
class(time)
times <- c("21:30:45", "21:35:50", "21:40:45")
codes <- c(200, 500, 404)
data <- data.frame(time=times, code=codes)
head(data)
class(data)
class(data$time)
class(code$time)
class(data$code)
class(times)
as.character(data$time)
data$time <- as.character(data$time)
class(code$time)
class(data$time)
data
time <- strptime(data$time, "%H:%M:%S")
class(strptime(data$time, "%H:%M:%S"))
data$time <- strptime(data$time, "%H:%M:%S")
data
data <- data.frame(time=times, code=codes)
data
class(data$time)
data$time <- as.character(data$time)
data
class(data$time)
times <- strptime(data$time, "%H:%M:%S")
data
data$time <- strptime(data$time, "%H:%M:%S")
data
class(data$time)
update.packages(ask=FALSE)
install.packages("rJava")
install.packages("RJDBC")
library(RJDBC)
drv <- JDBC("org.apache.hadoop.hive.jdbc.HiveDriver",
c(list.files("/usr/local/Cellar/hadoop/1.1.1/libexec",pattern="jar$",full.names=T),
list.files("/usr/local/Cellar/hive/0.9.0/libexec/lib",pattern="jar$",full.names=T)))
conn <- dbConnect(drv, "jdbc:hive://10.211.55.4:10000/default")
dbGetQuery(conn, "show tables")
dbSendQuery(conn, "CREATE TABLE records (year STRING, temperature INT, quality INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'")
dbGetQuery(conn, "show tables")
dbGetQuery(conn, "SHOW TABLES")
dbSendQuery(conn, "LOAD DATA LOCAL INPATH 'input/ncdc/micro-tab/sample.txt'
OVERWRITE INTO TABLE records")
dbSendQuery(conn, "LOAD DATA LOCAL INPATH '/User/hidekazu/workspace/Rinput/ncdc/micro-tab/sample.txt'
OVERWRITE INTO TABLE records")
dbSendQuery(conn, "LOAD DATA LOCAL INPATH 'input/ncdc/micro-tab/sample.txt '
OVERWRITE INTO TABLE records")
dbSendQuery(conn, "LOAD DATA LOCAL INPATH 'input/ncdc/micro-tab/sample.txt'
OVERWRITE INTO TABLE records")
dbSendQuery(conn, "LOAD DATA LOCAL INPATH '/Users/hidekazu/workspace/R/input/ncdc/micro-tab/sample.txt'
OVERWRITE INTO TABLE records")
dbSendQuery(conn, "LOAD DATA LOCAL INPATH 'input/ncdc/micro-tab/sample.txt'
OVERWRITE INTO TABLE records")
dbSendQuery(conn, "LOAD DATA LOCAL INPATH 'input/ncdc/micro-tab/sample.txt'
OVERWRITE INTO TABLE records")
results <- dbGetQuery(conn, "SELECT year, MAX(temperature)
FROM records
WHERE temperature <> 9999
AND (quality = 0 OR quality = 1 OR quality = 4 OR quality = 5 OR quality = 9)
GROUP BY year")
results
dbGetQuery(conn, "SHOW TABLES")
600 / 30000000
20 / 30000000
20 * 30000000
20 * 30000000 / 1024
20 * 30000000 / 1024 / 1024
600 * 8
600 * 16
0.25 / sqrt(2)
0.25 / sqrt(3)
0.5 / sqrt(2)
0.75 / sqrt(3)
0.75 / sqrt(2)
0.75 / sqrt(2)
0.99 * 0.5 + 0.01
0.505 * 0.5
0.505 * 0.75
0.505 * 0.01
install.packages("knitr")
install.packages("ChangeAnomalyDetection")
install.packages("RFinanceYJ")
library(ChangeAnomalyDetection)
library(RFinanceYJ)
library(ggplot2)
library(reshape2)
install.packages("ggplot2")
library(ChangeAnomalyDetection)
library(RFinanceYJ)
library(ggplot2)
library(reshape2)
stock <- quoteStockXtsData("2432.t", since = "2011-01-01")
stock <- as.data.frame(stock)
stock$date <- as.POSIXct(rownames(stock))
ggplot(yahoo, aes(x = date, y = Close)) +
geom_line()
ggplot(stock, aes(x = date, y = Close)) +
geom_line()
change.score <- changeAnomalyDetection(x = stock$Close, term = 30, order = c(1, 1, 0))
tail(change.score)
stock$change.score <- change.score
rstudio::viewData(stock)
ggplot(stock, aes(x = date, y = change.score)) +
geom_line()
stock <- stock[stock$change.score != 0, ]
stock$change.score <- stock$change.score * 10 + 1000
stock.melt <- melt(stock, id.vars = "date", measure.vars = c("Close", "change.score"))
rstudio::viewData(stock.melt)
ggplot(stock.melt, aes(x = date, y = value)) +
geom_line(aes(col = variable))
install.packages("ggplot2")
x <- 3
z <- 'TANAKA'
x + z
demo()
demo(lm.glm)
height <- c(58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72)
weight <- c(115, 117, 120, 123, 126, 129, 132, 135, 139, 142, 146, 150, 154, 159, 164)
mean(height)
sd(height)
sd(weight)
cor(weight, height)
plot(weight, height)
install.packages("tree")
library(ggplot2)
qplot(displ, hwt, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, shape=factor(year))
qplot(displ, hwy, data=mpg, shape=factor(year))
ggplot() + geom_point(data=mpg, aes(displ, hwy, shape=(factor(year))))
ggplot(movies) + stat_bin(aes(year, ..count..))
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
get_assets(lib, package = "rCharts")
get_token("holidayworking", 'TiADnQpCvCkN9etyQvP9XsjgNwuAuHaB')
install.packages("rjson’")
install.packages("rjson")
get_token("holidayworking", 'TiADnQpCvCkN9etyQvP9XsjgNwuAuHaB')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
require(devtools)
install_github('rNotebook', 'ramnathv')
rNotebook::viewNotebook()
install.package("shiny")
install.packages("shiny")
rNotebook::viewNotebook()
install.packages("RPostgreSQL")
library("RPostgreSQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='holidayworking.cqulcemvmnsl.ap-northeast-1.redshift.amazonaws.com', port=5439, dbname='dev',user='holidayworking',password='248F1mp421')
con
require(reshape2)
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c('category', 'year')
x1 <- xPlot(value ~ year, group = 'category', data = uspexp,
type = 'line-dotted')
x1
library(rCharts)
require(reshape2)
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c('category', 'year')
x1 <- xPlot(value ~ year, group = 'category', data = uspexp,
type = 'line-dotted')
x1
x1$publish('rCharts Sample : xCharts', host = 'gist')
setwd("/Users/hidekazu/Dropbox/workspace/R/javascript-visualization-library")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
slidify("index.Rmd")
slidify("index.Rmd")
library("slidifyLibraries", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
slidify("index.Rmd")
system("open index.html")
setwd("/Users/hidekazu/Dropbox/workspace/R/")
author("javascript-visualization-library")
slidify("index.Rmd")
system("open index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey,
type = c("line", "bubble", "scatter"), group = "Clap", size = "Age")
h1
require(devtools)
install_github('rCharts', 'ramnathv')
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey,
type = c("line", "bubble", "scatter"), group = "Clap", size = "Age")
h1
h1$publish('rCharts Sample : HighCharts', host = 'gist')
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$publish('rCharts Sample : Polychart - Scatterplot', host = 'gist')
r1$publish('rCharts Sample : Polychart - Scatterplot', host = 'rpubs')
slidify("index.Rmd")
hair_eye = as.data.frame(HairEyeColor)
r1 <- rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r1$publish('rCharts Sample : Polychart - Barplot', host = 'rpubs')
r1$publish('rCharts Sample : Polychart - Barplot', host = 'rpubs')
r1$publish('rCharts Sample : Polychart - Barplot', host = 'rpubs')
data(economics, package = 'ggplot2')
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = 'date', y = c('psavert', 'uempmed'), type = 'Line',
data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1
m1$publish('rCharts Sample : Morris', host = 'rpubs')
slidify("index.Rmd")
system("open index.html")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
n1$publish('rCharts Sample : NVD3', host = 'rpubs')
system("open index.html")
slidify("index.Rmd")
require(reshape2)
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c('category', 'year')
x1 <- xPlot(value ~ year, group = 'category', data = uspexp,
type = 'line-dotted')
x1
x1$publish('rCharts Sample : xCharts', host = 'rpubs')
slidify("index.Rmd")
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey,
type = c("line", "bubble", "scatter"), group = "Clap", size = "Age")
h1
h1$publish('rCharts Sample : HighCharts', host = 'rpubs')
slidify("index.Rmd")
usp = reshape2::melt(USPersonalExpenditure)
p4 <- Rickshaw$new()
p4$layer(value ~ Var2, group = 'Var1', data = usp, type = 'area')
p4
p4$publish('rCharts Sample : Rickshaw', host = 'rpubs')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
data(economics, package = 'ggplot2')
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = 'date', y = c('psavert', 'uempmed'), type = 'Line',
data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
type = 'multiBarChart')
data(economics, package = 'ggplot2')
econ <- transform(economics, date = as.character(date))
View(econ)
data(economics, package = 'ggplot2')
econ <- transform(economics, date = as.character(date))
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> ここにいるよ </p>")
map3
